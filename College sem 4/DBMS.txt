Pg - 8,9,10,20,21
// Comparison
SQL	                MongoDB
Database	          Database
Table	              Collection
Row (Record)	      Document
Column (Field)	    Field (Key)
Select              Find


//üü¢ Database Commands
show dbs	        -       List all databases
use dbName	        -     Switch to (or create) a database
db	                -     Show current database
db.dropDatabase()	-       Delete current database



//üóÇ Collection Commands 
show collections	                              List all collections in the current DB
db.createCollection("myCollection")	            Create a collection
db.myCollection.drop()	                        Drop a collection


Let "users" be the name of a collection

//üì• Insert Documents
db.users.insertOne({ name: "Alice", age: 25 });

db.users.insertMany([
  { name: "Bob", age: 30 },
  { name: "Charlie", age: 22 }
]);


//üîç Query Documents

db.<collection>.find(<query>, <projection>)
<collection>: Name of the collection (e.g., Teachers, Students)
<query> (optional): Filter conditions to select documents
<projection> (optional): Specify which fields to include or exclude


db.users.find(); // Get all documents
db.users.find({ age: { $gt: 25 } }); // Where age > 25
db.users.findOne({ name: "Alice" }); // Get a single document

//üîç Query Modifiers
.limit(n)	                          Limit number of results
.sort({ age: -1 })	                Sort descending
.project({ name: 1, _id: 0 })	      Select fields to return


$gt, $gte, $lt, $lte	          Greater/Less than (or equal)
$eq, $ne	                      Equals / Not equals
$in, $nin	                      Match in array / not in array
$or, $and, $nor	                Logical operators
$not	                          Negate a condition
$exists	                        Check if field exists


//‚úèÔ∏è Update Documents
db.users.updateOne(
  { name: "Alice" },
  { $set: { age: 26 } }
);

db.users.updateMany(
  { age: { $lt: 30 } },
  { $inc: { age: 1 } }
);


$set	              Set value
$unset	            Remove a field
$inc	              Increment numeric value
$mul	              Multiply numeric value
$rename	            Rename a field
$min, $max	        Only update if new value is less/greater
$currentDate	      Set to current date/time



//‚ùå Delete Documents
db.users.deleteOne({ name: "Charlie" });
db.users.deleteMany({ age: { $gt: 40 } });



//üß† Aggregation Example - SUM, AVG, MIN, MAX, FIRST, LAST

db.<collection>.aggregate([ <stage1>, <stage2>, ... ])
It takes an array of stages, each beginning with a $ operator like $match, $group, $project, etc.


db.users.aggregate([
  { $match: { age: { $gt: 20 } } },
  { $group: { _id: "$age", count: { $sum: 1 } } }
]);

db.Teacher_Info.aggregate([{$group:{_id:‚Äù$DeptName‚Äù, Total_sal : {$sum: ‚Äú$sal‚Äù}}}])

//üß© Aggregation Pipeline Stages

$match	            Filter documents
$group	            Group and aggregate
$sort	              Sort documents
$limit, $skip	      Limit/skip results
$project	          Shape the output

//üõ° Indexing
db.collection.createIndex({ name: 1 }); // Ascending
db.collection.createIndex({ age: -1 }); // Descending
db.collection.getIndexes(); // List indexes
db.collection.dropIndex("indexName"); // Drop index

1  -> asecending order
-1 -> descending order















